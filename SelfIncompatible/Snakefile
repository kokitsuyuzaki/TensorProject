import pandas as pd
from snakemake.utils import min_version

#
# Setting
#
min_version("6.5.3")
container: 'docker://koki/tensor-projects-self-incompatible:20221217'

# Unsupervised Models
U_MODELS = [
    'Model-1-A1G', 'Model-1-A1',
    'Model-2-A1G',
    'Model-3-A1G', 'Model-3-A1',
    'Model-4-A1G', 'Model-4-A1',
    'Model-5-A1',
    'Model-6-A1A3G',
    'Model-7-A1A2G',
    'Model-8-A1GLGR', 'Model-8-A1',
    'Model-9-A1A4GLGR', 'Model-9-A1A4',
    'Model-10-A1GLGR', 'Model-10-A1',
    'Model-11-A1A4GLGR', 'Model-11-A1A4',
    'Model-PCA']

rule all:
    input:
        expand('output/FINISH_X_{u_model}', u_model=U_MODELS)

rule preprocess_train:
    input:
        'data/sp11alnfinal90seq.aln',
        'data/SRKfinal_90seq.aln'
    output:
        'data/train_Tensors.RData'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/preprocess_train.txt'
    log:
        'logs/preprocess_train.log'
    shell:
        'src/preprocess_train.sh {input} {output} >& {log}'

rule preprocess_test:
    input:
        'data/ArabiLigand_all_final_190seq.aln',
        'data/ArabiReceptorFinal.aln'
    output:
        'data/test_Tensors.RData'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/preprocess_test.txt'
    log:
        'logs/preprocess_test.log'
    shell:
        'src/preprocess_test.sh {input} {output} >& {log}'

rule train_u_models:
    input:
        'data/train_Tensors.RData'
    output:
        'output/train_{u_model}.RData',
        'output/train_X_{u_model}.csv'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/{u_model}.txt'
    log:
        'logs/{u_model}.log'
    shell:
        'src/train_{wildcards.u_model}.sh {input} {output} >& {log}'

rule test_u_models:
    input:
        'data/test_Tensors.RData',
        'output/train_{u_model}.RData'
    output:
        'output/test_X_{u_model}.csv'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/{u_model}.txt'
    log:
        'logs/{u_model}.log'
    shell:
        'src/test_{wildcards.u_model}.sh {input} {output} >& {log}'

rule check_size:
    input:
        'output/train_X_{u_model}.csv',
        'output/test_X_{u_model}.csv'
    output:
        'output/FINISH_X_{u_model}'
    resources:
        mem_gb=50
    benchmark:
        'benchmarks/check_size_{u_model}.txt'
    log:
        'logs/check_size_{u_model}.log'
    shell:
        'src/check_size.sh {input} {output} >& {log}'
